name: Build and Publish (docs)

on:
  push:
    branches:
      - main
    # Avoid infinite loops when committing only docs/
    paths-ignore:
      - 'docs/**'

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: '0.150.0'
          extended: true

      - name: Set cache-busting version (appVer)
        run: echo "HUGO_PARAMS_APPVER=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Build site (publishDir=docs)
        run: hugo --minify

      - name: Validate SRI references in generated HTML
        run: |
          python - << 'PY'
          import os, re, sys, base64, hashlib
          from urllib.parse import urlparse

          root = 'docs'
          problems = []

          def to_local(url: str) -> str:
              # Map a URL to a local file under docs/.
              # Handles GitHub Pages project paths by stripping the first segment if needed.
              from urllib.parse import urlparse
              path = urlparse(url).path or url
              path = path.lstrip('/')
              cand = os.path.join(root, path)
              if os.path.exists(cand):
                  return cand
              if '/' in path:
                  _, rest = path.split('/', 1)
                  cand2 = os.path.join(root, rest)
                  if os.path.exists(cand2):
                      return cand2
              return cand
          # Scan all HTML under docs/
          for dirpath, _, filenames in os.walk(root):
              for fn in filenames:
                  if not fn.endswith('.html'): continue
                  fp = os.path.join(dirpath, fn)
                  html = open(fp, 'rb').read().decode('utf-8', errors='ignore')
                  # Find stylesheet links with integrity
                  for m in re.finditer(r'<link[^>]+rel=["\"]stylesheet["\"][^>]+href=["\"]([^"\"]+)["\"][^>]+integrity=["\"](sha256-[^"\"]+)["\"]', html, re.I):
                      url, integrity = m.group(1), m.group(2)
                      path = urlparse(url).path or url
                      if path.startswith('/'):
                          path = path[1:]
                      if path.startswith('eventhorizon/'):
                          path = path[len('eventhorizon/'):]
                      local = to_local(url)
                      if not os.path.exists(local):
                          problems.append(f"Missing CSS asset: {url} -> {local}")
                          continue
                      data = open(local, 'rb').read()
                      digest = base64.b64encode(hashlib.sha256(data).digest()).decode('ascii')
                      if integrity != f'sha256-{digest}':
                          problems.append(f"SRI mismatch CSS: {url}\n expected {integrity}\n   actual sha256-{digest}")
                  # Find scripts with integrity
                  for m in re.finditer(r'<script[^>]+src=["\"]([^"\"]+)["\"][^>]+integrity=["\"](sha256-[^"\"]+)["\"]', html, re.I):
                      url, integrity = m.group(1), m.group(2)
                      path = urlparse(url).path or url
                      if path.startswith('/'):
                          path = path[1:]
                      if path.startswith('eventhorizon/'):
                          path = path[len('eventhorizon/'):]
                      local = to_local(url)
                      if not os.path.exists(local):
                          problems.append(f"Missing JS asset: {url} -> {local}")
                          continue
                      data = open(local, 'rb').read()
                      digest = base64.b64encode(hashlib.sha256(data).digest()).decode('ascii')
                      if integrity != f'sha256-{digest}':
                          problems.append(f"SRI mismatch JS: {url}\n expected {integrity}\n   actual sha256-{digest}")

          if problems:
              print('\n'.join(problems))
              sys.exit(1)
          else:
              print('SRI validation passed for CSS/JS references')
          PY

      - name: Commit generated docs
        run: |
          if [ -n "$(git status --porcelain docs)" ]; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add docs
            git commit -m "Build docs with appVer=${HUGO_PARAMS_APPVER}"
            git push
          else
            echo "No changes in docs"
          fi
